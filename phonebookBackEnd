#! /usr/bin/env node

const http = require("http");

const uuidv4 = require("uuid/v4");

const foldCase = require("fold-case");

const urlRegex = /^\/contacts(?:\/[0-9]{1,8}\/?)?$/i;
//    /^\/contacts(?:\/([a-f0-9]{8}-([a-f0-9]{4}-){3}[a-f0-9]{12})\/?)?$/i;

let phoneBook = {
    0:{
        id:0,
        name:"ẞerry",
        email:"Terryp@wegrok.net",
        number:"678-383-7780"
    },
    1:{
        id:1,
        name:"Terry",
        email:"Terryp@wegrok.net",
        number:"770-977-3557"
    }
};
let search = (query, target) => {
    return new Promise((resolve) =>{
        let results = [];
        if (!query){
            resolve(target);
        }
        Object.values(target).forEach((entry) => {
            for (let value  of Object.values(entry)){
                if (foldCase(String(value)).includes(foldCase(String(query)))){
                    results.push(entry);
                    break;
                }
            }
        });
        if (results.length === 1){
            resolve(results[0]);
        }
        resolve(results);
    });
};
let newContact = (id=uuidv4(), target, request) => {
    return new Promise((resolve, reject) => {
        let body = "";
        let contact = "";
        //remove id check and support for setting an id eventually
        if (Object.keys(target).includes(id)){
            reject({ statusCode:422,
                message:"Contact already exists if you want to update a"+
                " contact please use PUT request"});
        }


        request.on("data", (partialBody) => {
            body += partialBody;
        });
        request.on("end", () => {
            try{
                contact = JSON.parse(body);
                contact["id"] = id;
                target[id] = contact;
                resolve(target);
            }
            catch (error){
                if (error.name === "SyntaxError"){
                    error.statusCode = 400;
                    error.message = "Invaild JSON received.";
                    reject(error);
                }
            }
        });

    });
};
let server = http.createServer((request, response) => {
    const router = {"GET":search,
        "POST":newContact};
    if (urlRegex.test(request.url)) {
        let parameter = request.url.match(urlRegex)[1];
        console.log(parameter);
        parameter = parameter ? parameter : undefined;
        router[request.method](parameter, phoneBook, request, response).then(
            (data) => {
                phoneBook = data;
                response.end(JSON.stringify(phoneBook));})
            .catch((error) =>{
                response.statusCode = error.statusCode;
                response.end(error.message);
            });
    }
    else {
        response.statusCode = 404;
        response.end("This content is not available in your country");
    }
});
server.listen(3000);
